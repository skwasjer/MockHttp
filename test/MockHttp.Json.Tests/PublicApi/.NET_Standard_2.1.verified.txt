[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/skwasjer/MockHttp")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.1", FrameworkDisplayName=".NET Standard 2.1")]
namespace MockHttp.Json
{
    public interface IJsonAdapter
    {
        string Serialize(object? value);
    }
    public static class JsonRequestMatchingExtensions
    {
        public static MockHttp.RequestMatching JsonBody<T>(this MockHttp.RequestMatching builder, T content) { }
        public static MockHttp.RequestMatching JsonBody<T>(this MockHttp.RequestMatching builder, T body, MockHttp.Json.IJsonAdapter? adapter) { }
    }
    public static class MockConfigurationExtensions
    {
        public static MockHttp.IMockConfiguration UseJsonAdapter(this MockHttp.IMockConfiguration mockConfig, MockHttp.Json.IJsonAdapter jsonAdapter) { }
    }
    public static class ResponseBuilderExtensions
    {
        public static MockHttp.Language.Flow.Response.IWithContentResult JsonBody<T>(this MockHttp.Language.Response.IWithContent builder, System.Func<T> jsonContentFactory, System.Text.Encoding? encoding = null, MockHttp.Json.IJsonAdapter? adapter = null) { }
        public static MockHttp.Language.Flow.Response.IWithContentResult JsonBody<T>(this MockHttp.Language.Response.IWithContent builder, T jsonContent, System.Text.Encoding? encoding = null, MockHttp.Json.IJsonAdapter? adapter = null) { }
    }
}
namespace MockHttp.Json.Newtonsoft
{
    public static class MockConfigurationExtensions
    {
        public static MockHttp.IMockConfiguration UseNewtonsoftJson(this MockHttp.IMockConfiguration mockConfig, Newtonsoft.Json.JsonSerializerSettings? serializerSettings = null) { }
    }
    public class NewtonsoftAdapter : MockHttp.Json.IJsonAdapter
    {
        public NewtonsoftAdapter(Newtonsoft.Json.JsonSerializerSettings? settings = null) { }
        public string Serialize(object? value) { }
    }
    public static class RequestMatchingExtensions
    {
        public static MockHttp.RequestMatching JsonBody<T>(this MockHttp.RequestMatching builder, T body, Newtonsoft.Json.JsonSerializerSettings? serializerSettings) { }
    }
    public static class ResponseBuilderExtensions
    {
        public static MockHttp.Language.Flow.Response.IWithContentResult JsonBody<T>(this MockHttp.Language.Response.IWithContent builder, System.Func<T> jsonContentFactory, System.Text.Encoding? encoding = null, Newtonsoft.Json.JsonSerializerSettings? serializerSettings = null) { }
        public static MockHttp.Language.Flow.Response.IWithContentResult JsonBody<T>(this MockHttp.Language.Response.IWithContent builder, T jsonContent, System.Text.Encoding? encoding = null, Newtonsoft.Json.JsonSerializerSettings? serializerSettings = null) { }
    }
}
namespace MockHttp.Json.SystemTextJson
{
    public static class MockConfigurationExtensions
    {
        public static MockHttp.IMockConfiguration UseSystemTextJson(this MockHttp.IMockConfiguration mockConfig, System.Text.Json.JsonSerializerOptions? options = null) { }
    }
    public static class RequestMatchingExtensions
    {
        public static MockHttp.RequestMatching JsonBody<T>(this MockHttp.RequestMatching builder, T body, System.Text.Json.JsonSerializerOptions? serializerOptions) { }
    }
    public static class ResponseBuilderExtensions
    {
        public static MockHttp.Language.Flow.Response.IWithContentResult JsonBody<T>(this MockHttp.Language.Response.IWithContent builder, System.Func<T> jsonContentFactory, System.Text.Encoding? encoding = null, System.Text.Json.JsonSerializerOptions? serializerOptions = null) { }
        public static MockHttp.Language.Flow.Response.IWithContentResult JsonBody<T>(this MockHttp.Language.Response.IWithContent builder, T jsonContent, System.Text.Encoding? encoding = null, System.Text.Json.JsonSerializerOptions? serializerOptions = null) { }
    }
    public sealed class SystemTextJsonAdapter : MockHttp.Json.IJsonAdapter
    {
        public SystemTextJsonAdapter(System.Text.Json.JsonSerializerOptions? options = null) { }
        public string Serialize(object? value) { }
    }
}